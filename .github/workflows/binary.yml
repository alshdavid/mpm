name: Release Binary

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - "main"

env:
  PROJECT_NAME: mpm

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: eval $(curl -sSf sh.davidalsh.com/rust.sh | sh)
      - run: cargo test

  format:
    name: 📝 Format
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: eval $(curl -sSf sh.davidalsh.com/rust.sh | sh)
      - run: cargo install cargo-xfmt
      - run: cargo xfmt --check

  version:
    name: 🌐 Auto Version Increment
    runs-on: ubuntu-24.04
    outputs:
      VERSION: ${{ steps.generate.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - id: generate
        run: |
          set -e
          LAST_VERSION=$(curl -sSL https://api.github.com/repos/alshdavid/$PROJECT_NAME/releases/latest | jq -r ".tag_name" | cut -d "." -f 3)
          if [ "$LAST_VERSION" = "" ]; then
            LAST_VERSION="0"
          fi
          declare -i var="$LAST_VERSION"
          var=$var+1
          VERSION="0.0.$var"

          echo $VERSION
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

  build:
    strategy:
      matrix:
        config:
          - name: 🐥 Linux AMD64
            runner: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            run: |
              rustup target add x86_64-unknown-linux-musl && \
              sudo apt install -y musl-tools

          - name: 🐥 Linux ARM64
            runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            run: |
              rustup target add aarch64-unknown-linux-musl && \
              sudo apt install -y musl-tools

          - name: 🍎 MacOS AMD64
            target: x86_64-apple-darwin
            runner: macos-13

          - name: 🍎 MacOS ARM64
            target: aarch64-apple-darwin
            runner: macos-15

          - name: 🟦 Windows AMD64
            target: x86_64-pc-windows-msvc
            runner: windows-latest

          - name: 🟦 Windows ARM64
            runner: windows-latest
            target: aarch64-pc-windows-msvc
            run: rustup target add aarch64-pc-windows-msvc

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.runner }}
    needs: 
      - "version"
    steps:
      - uses: actions/checkout@v4
      - run: eval $(curl -sSf sh.davidalsh.com/rust.sh | sh)
      - if: matrix.config.run
        run: ${{ matrix.config.run }}
      - run: sed "s/0.0.0-local/${VERSION}/g" "Cargo.toml" > "Cargo.toml.new" && mv "Cargo.toml.new" "Cargo.toml"
        env:
          VERSION: ${{needs.version.outputs.VERSION}}
      - run: cargo build --release --target ${{ matrix.config.target }}
        # Optional, reduce the artifact size 
      - run: cd target/${{ matrix.config.target }}/release && rm -rf build .fingerprint deps examples incremental
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.config.target }}
          path: ${{ github.workspace }}/target/**/*
          if-no-files-found: error
          retention-days: 1

  publish_github_release:
    name: "🔄 Publish Github Release"
    runs-on: ubuntu-24.04
    needs:
      - test
      - format
      - build
      - version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: 
          pattern: ${{ env.PROJECT_NAME }}-*
          path: target
          merge-multiple: true

      - name: Publish` Github Release
        env:
          VERSION: ${{needs.version.outputs.VERSION}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          echo "Tag: ${VERSION}"

          gh release create $VERSION  --draft --notes "Automatically built binaries"
          gh release edit $VERSION --title "🚀 v$VERSION"

          cd ${{ github.workspace }}/target/x86_64-unknown-linux-musl/release
          chmod +x ${PROJECT_NAME}
          tar -czf ./${PROJECT_NAME}-$VERSION-linux-amd64.tar.gz ${PROJECT_NAME}
          gh release upload $VERSION ./${PROJECT_NAME}-$VERSION-linux-amd64.tar.gz

          cd ${{ github.workspace }}/target/aarch64-unknown-linux-musl/release
          chmod +x ${PROJECT_NAME}
          tar -czf ./${PROJECT_NAME}-$VERSION-linux-arm64.tar.gz ${PROJECT_NAME}
          gh release upload $VERSION ./${PROJECT_NAME}-$VERSION-linux-arm64.tar.gz

          cd ${{ github.workspace }}/target/x86_64-apple-darwin/release
          chmod +x ${PROJECT_NAME}
          tar -czf ./${PROJECT_NAME}-$VERSION-macos-amd64.tar.gz ${PROJECT_NAME}
          gh release upload $VERSION ./${PROJECT_NAME}-$VERSION-macos-amd64.tar.gz

          cd ${{ github.workspace }}/target/aarch64-apple-darwin/release
          chmod +x ${PROJECT_NAME}
          tar -czf ./${PROJECT_NAME}-$VERSION-macos-arm64.tar.gz ${PROJECT_NAME}
          gh release upload $VERSION ./${PROJECT_NAME}-$VERSION-macos-arm64.tar.gz

          cd ${{ github.workspace }}/target/x86_64-pc-windows-msvc/release
          chmod +x ${PROJECT_NAME}.exe
          tar -czf ./${PROJECT_NAME}-$VERSION-windows-amd64.tar.gz ${PROJECT_NAME}.exe
          gh release upload $VERSION ./${PROJECT_NAME}-$VERSION-windows-amd64.tar.gz

          cd ${{ github.workspace }}/target/aarch64-pc-windows-msvc/release
          chmod +x ${PROJECT_NAME}.exe
          tar -czf ./${PROJECT_NAME}-$VERSION-windows-arm64.tar.gz ${PROJECT_NAME}.exe
          gh release upload $VERSION ./${PROJECT_NAME}-$VERSION-windows-arm64.tar.gz

          gh release edit $VERSION --draft=false

  # publish_crates_io:
  #   name: "🔁 Publish: Crate"
  #   runs-on: ubuntu-latest
  #   needs: 
  #     - test
  #     - format
  #     - build
  #     - version
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: eval $(curl -sSf sh.davidalsh.com/rust.sh | sh)
  #     - run: |
  #         set -e
  #         sed "s/0.0.0-local/${VERSION}/g" "Cargo.toml" > "Cargo.toml.new" && mv "Cargo.toml.new" "Cargo.toml"
  #         cargo publish --allow-dirty
  #       env:
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
  #         VERSION: ${{needs.version.outputs.VERSION}}
